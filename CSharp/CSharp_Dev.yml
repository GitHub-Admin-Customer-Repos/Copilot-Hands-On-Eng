openapi: 3.0.0
info:
  title: Large API Example
  description: This is a sample API for a large application.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Main (production) server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      description: Retrieve a list of all users in the system.
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example-1:
                  summary: A sample response
                  value: [{"id": "1", "name": "John Doe", "email": "john@example.com"}]
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user in the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              example-1:
                summary: A sample request
                value: {"name": "John Doe", "email": "john@example.com"}
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  summary: A sample response
                  value: {"id": "1", "name": "John Doe", "email": "john@example.com"}

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get a user by ID
      description: Retrieve a single user by their unique ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  summary: A sample response
                  value: {"id": "1", "name": "John Doe", "email": "john@example.com"}
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update a user by ID
      description: Update the details of an existing user by their unique ID.
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
            examples:
              example-1:
                summary: A sample request
                value: {"name": "Jane Doe", "email": "jane@example.com"}
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  summary: A sample response
                  value: {"id": "1", "name": "Jane Doe", "email": "jane@example.com"}
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete a user by ID
      description: Remove a user from the system by their unique ID.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    NewUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

security:
  - api_key: []

tags:
  - name: users
    description: Operations about users

externalDocs:
  description: Find out more about this API
  url: https://example.com/docs